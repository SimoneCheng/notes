"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9761],{2422:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>a});var s=t(5893),o=t(1151);const l={title:"React",date:new Date("2023-05-06T00:00:00.000Z")},i=void 0,r={id:"notes/coding-style-guide/react",title:"React",description:"\u5728\u5beb React \u7684\u6642\u5019\u8981\u7279\u5225\u6ce8\u610f\u7684 coding style\uff08\u81ea\u5df1\u5e38\u5e38\u5fd8\u8a18\uff09\uff0c\u5176\u4ed6\u7684\u5c31\u6309\u7167 javascript coding style guide \u5c31\u53ef\u4ee5\u4e86\u3002",source:"@site/docs/notes/coding-style-guide/react.md",sourceDirName:"notes/coding-style-guide",slug:"/notes/coding-style-guide/react",permalink:"/notes/docs/notes/coding-style-guide/react",draft:!1,unlisted:!1,editUrl:"https://github.com/SimoneCheng/notes/tree/main/docs/notes/coding-style-guide/react.md",tags:[],version:"current",frontMatter:{title:"React",date:"2023-05-06T00:00:00.000Z"},sidebar:"notes",previous:{title:"JavaScript",permalink:"/notes/docs/notes/coding-style-guide/javascript"},next:{title:"Recursion \u905e\u8ff4",permalink:"/notes/docs/notes/data-structure/recursion"}},c={},a=[{value:"\ud83d\udc33 Rules",id:"-rules",level:2},{value:"\ud83e\udd80 Quotes",id:"-quotes",level:3},{value:"\ud83e\udd80 Buttons",id:"-buttons",level:3},{value:"\ud83e\udd80 No inline function in jsx",id:"-no-inline-function-in-jsx",level:3},{value:"\ud83d\udc33 Resource",id:"-resource",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"\u5728\u5beb React \u7684\u6642\u5019\u8981\u7279\u5225\u6ce8\u610f\u7684 coding style\uff08\u81ea\u5df1\u5e38\u5e38\u5fd8\u8a18\uff09\uff0c\u5176\u4ed6\u7684\u5c31\u6309\u7167 javascript coding style guide \u5c31\u53ef\u4ee5\u4e86\u3002"}),"\n",(0,s.jsx)(n.h2,{id:"-rules",children:"\ud83d\udc33 Rules"}),"\n",(0,s.jsx)(n.h3,{id:"-quotes",children:"\ud83e\udd80 Quotes"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Always use double quotes (",(0,s.jsx)(n.code,{children:'"'}),") for JSX attributes, but single quotes (",(0,s.jsx)(n.code,{children:"'"}),") for all other JS ans CSS."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"eslint"}),": ",(0,s.jsx)(n.a,{href:"https://eslint.org/docs/latest/rules/jsx-quotes",children:(0,s.jsx)(n.code,{children:"jsx-quotes"})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"why"}),": Regular HTML attributes also typically use double quotes instead of single, so JSX attributes mirror this convention."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"example"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"// bad\n<Foo bar='bar' />\n\n// good\n<Foo bar=\"bar\" />\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"// bad\n<Foo style={{ left: \"20px\" }} />\n\n// good\n<Foo style={{ left: '20px' }} />\n"})}),"\n",(0,s.jsx)(n.h3,{id:"-buttons",children:"\ud83e\udd80 Buttons"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["This rules enforces an explicit type attribute for all the button elements and checks that its value is valid per spec (i.e., is one of ",(0,s.jsx)(n.code,{children:'"button"'}),", ",(0,s.jsx)(n.code,{children:'"submit"'}),", and ",(0,s.jsx)(n.code,{children:'"reset"'}),")."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"eslint-plugin-react"}),": ",(0,s.jsx)(n.a,{href:"https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/button-has-type.md",children:(0,s.jsx)(n.code,{children:"button-has-type"})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"why"}),': The default value of type attribute for button HTML element is "submit" which is often not the desired behavior and may lead to unexpected page reloads.']}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"example"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'// bad\n<button>Hello</button>\n\n// good\n<button type="button">Hello</button>\n'})}),"\n",(0,s.jsx)(n.h3,{id:"-no-inline-function-in-jsx",children:"\ud83e\udd80 No inline function in jsx"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Do not write a ",(0,s.jsx)(n.code,{children:"bind"})," call or ",(0,s.jsx)(n.code,{children:"arrow function"})," in a JSX prop."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"eslint-plugin-react"}),": ",(0,s.jsx)(n.a,{href:"https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-bind.md",children:(0,s.jsx)(n.code,{children:"jsx-no-bind"})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"why"}),": A ",(0,s.jsx)(n.code,{children:"bind"})," call or ",(0,s.jsx)(n.code,{children:"arrow function"})," in a JSX prop will create a brand new function on every single render. This is bad for performance, as it may cause unnecessary re-renders if a brand new function is passed as a prop to a component that uses reference equality check on the prop to determine if it should update."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"note"}),": \u5e73\u5e38\u5beb\u7684\u6642\u5019\u61c9\u8a72\u662f\u4e0d\u9700\u8981\u9019\u9ebc\u56b4\u683c\uff0c\u6bd4\u8f03\u8981\u6ce8\u610f\u7684\u662f\uff1a\u5982\u679c\u5df2\u7d93\u628a event handler \u5c01\u88dd\u6210 function \u7684\u8a71\uff0c\u5c31\u8981\u7279\u5225\u6aa2\u67e5\u4e00\u4e0b\u662f\u4e0d\u662f\u53ef\u4ee5\u907f\u514d\u5beb inline function\u3002"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"example"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"// bad\n<Button onClick={(e) => console.log(e)}>Hello</Button>\n\n// good\nconst handleClickButton = (e) => {\n    console.log(e);\n}\n<Button onClick={handleClickButton}>Hello</Button>\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:'// bad\nconst handleChange = (e) => {\n    setValue(e.target.value);\n    console.log(e.target.value);\n    // ...\n}\n<input value="Hello" onChange={(e) => handleChange(e)} />\n\n// good\nconst handleChange = (e) => {\n    setValue(e.target.value);\n    console.log(e.target.value);\n    // ...\n}\n<input value="Hello" onChange={handleChange} />\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-resource",children:"\ud83d\udc33 Resource"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/airbnb/javascript/tree/master/react",children:"Airbnb React/JSX Style Guide"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/jsx-eslint/eslint-plugin-react",children:"ESlint plugin React"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://jaketrent.com/post/naming-event-handlers-react/",children:"Event Handler Naming in React"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>i});var s=t(7294);const o={},l=s.createContext(o);function i(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);