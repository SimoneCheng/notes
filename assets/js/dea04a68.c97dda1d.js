"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[127],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,v=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return r?n.createElement(v,l(l({ref:t},p),{},{components:r})):n.createElement(v,l({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6440:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={title:"Binary Tree \u4e8c\u5143\u6a39",date:new Date("2022-12-04T00:00:00.000Z")},l=void 0,i={unversionedId:"notes/Data Structure/binary-tree",id:"notes/Data Structure/binary-tree",title:"Binary Tree \u4e8c\u5143\u6a39",description:"\ud83d\udc33 Definition \u5b9a\u7fa9",source:"@site/docs/notes/Data Structure/binary-tree.md",sourceDirName:"notes/Data Structure",slug:"/notes/Data Structure/binary-tree",permalink:"/notes/docs/notes/Data Structure/binary-tree",draft:!1,editUrl:"https://github.com/SimoneCheng/notes/tree/main/docs/notes/Data Structure/binary-tree.md",tags:[],version:"current",frontMatter:{title:"Binary Tree \u4e8c\u5143\u6a39",date:"2022-12-04T00:00:00.000Z"},sidebar:"notes",previous:{title:"Types and Operators",permalink:"/notes/docs/notes/\u514b\u670dJS\u7684\u5947\u602a\u90e8\u5206/types-and-operators"},next:{title:"Git Basic - \u5206\u652f\u8207\u5206\u652f\u5408\u4f75",permalink:"/notes/docs/notes/Git/git-basic-1"}},s={},c=[{value:"\ud83d\udc33 Definition \u5b9a\u7fa9",id:"-definition-\u5b9a\u7fa9",level:2},{value:"\ud83d\udc33 How to Traverse A Tree \u904d\u6b77\u4e8c\u5143\u6a39",id:"-how-to-traverse-a-tree-\u904d\u6b77\u4e8c\u5143\u6a39",level:2},{value:"\ud83e\udd80 Pre-order Traversal",id:"-pre-order-traversal",level:3},{value:"\ud83e\udd80 In-order Traversal",id:"-in-order-traversal",level:3},{value:"\ud83e\udd80 Post-order Traversal",id:"-post-order-traversal",level:3},{value:"\ud83d\udc33 \u5b78\u7fd2\u8cc7\u6e90",id:"-\u5b78\u7fd2\u8cc7\u6e90",level:2}],p={toc:c};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"-definition-\u5b9a\u7fa9"},"\ud83d\udc33 Definition \u5b9a\u7fa9"),(0,a.kt)("h2",{id:"-how-to-traverse-a-tree-\u904d\u6b77\u4e8c\u5143\u6a39"},"\ud83d\udc33 How to Traverse A Tree \u904d\u6b77\u4e8c\u5143\u6a39"),(0,a.kt)("h3",{id:"-pre-order-traversal"},"\ud83e\udd80 Pre-order Traversal"),(0,a.kt)("p",null,"\u9806\u5e8f\uff1a"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u4e2d"),(0,a.kt)("li",{parentName:"ol"},"\u5de6"),(0,a.kt)("li",{parentName:"ol"},"\u53f3")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"")),(0,a.kt)("h3",{id:"-in-order-traversal"},"\ud83e\udd80 In-order Traversal"),(0,a.kt)("p",null,"\u9806\u5e8f\uff1a"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u5de6"),(0,a.kt)("li",{parentName:"ol"},"\u4e2d"),(0,a.kt)("li",{parentName:"ol"},"\u53f3")),(0,a.kt)("h3",{id:"-post-order-traversal"},"\ud83e\udd80 Post-order Traversal"),(0,a.kt)("p",null,"\u9806\u5e8f\uff1a"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u5de6"),(0,a.kt)("li",{parentName:"ol"},"\u53f3"),(0,a.kt)("li",{parentName:"ol"},"\u4e2d")),(0,a.kt)("p",null,"DFS \u905e\u8ff4"),(0,a.kt)("h2",{id:"-\u5b78\u7fd2\u8cc7\u6e90"},"\ud83d\udc33 \u5b78\u7fd2\u8cc7\u6e90"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://leetcode.com/explore/learn/card/data-structure-tree/"},"https://leetcode.com/explore/learn/card/data-structure-tree/"))))}u.isMDXComponent=!0}}]);