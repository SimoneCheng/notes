"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[127],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},d=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=u(r),h=a,f=c["".concat(s,".").concat(h)]||c[h]||p[h]||o;return r?n.createElement(f,l(l({ref:t},d),{},{components:r})):n.createElement(f,l({ref:t},d))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},6440:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var n=r(7462),a=(r(7294),r(3905));const o={title:"Binary Tree \u4e8c\u5143\u6a39",date:new Date("2022-12-04T00:00:00.000Z")},l=void 0,i={unversionedId:"notes/Data Structure/binary-tree",id:"notes/Data Structure/binary-tree",title:"Binary Tree \u4e8c\u5143\u6a39",description:"\ud83d\udc33 Definition \u5b9a\u7fa9",source:"@site/docs/notes/Data Structure/binary-tree.md",sourceDirName:"notes/Data Structure",slug:"/notes/Data Structure/binary-tree",permalink:"/notes/docs/notes/Data Structure/binary-tree",draft:!1,editUrl:"https://github.com/SimoneCheng/notes/tree/main/docs/notes/Data Structure/binary-tree.md",tags:[],version:"current",lastUpdatedBy:"SimoneCheng",lastUpdatedAt:1673496398,formattedLastUpdatedAt:"Jan 12, 2023",frontMatter:{title:"Binary Tree \u4e8c\u5143\u6a39",date:"2022-12-04T00:00:00.000Z"},sidebar:"notes",previous:{title:"Types and Operators",permalink:"/notes/docs/notes/\u514b\u670dJS\u7684\u5947\u602a\u90e8\u5206/types-and-operators"},next:{title:"Priority Queue",permalink:"/notes/docs/notes/Data Structure/priority-queue"}},s={},u=[{value:"\ud83d\udc33 Definition \u5b9a\u7fa9",id:"-definition-\u5b9a\u7fa9",level:2},{value:"\ud83d\udc33 How to Traverse A Tree \u904d\u6b77\u4e8c\u5143\u6a39",id:"-how-to-traverse-a-tree-\u904d\u6b77\u4e8c\u5143\u6a39",level:2},{value:"\ud83e\udd80 Pre-order Traversal",id:"-pre-order-traversal",level:3},{value:"\ud83e\udd80 In-order Traversal",id:"-in-order-traversal",level:3},{value:"\ud83e\udd80 Post-order Traversal",id:"-post-order-traversal",level:3},{value:"\ud83d\udc33 \u5b78\u7fd2\u8cc7\u6e90",id:"-\u5b78\u7fd2\u8cc7\u6e90",level:2}],d={toc:u};function p(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"-definition-\u5b9a\u7fa9"},"\ud83d\udc33 Definition \u5b9a\u7fa9"),(0,a.kt)("p",null,"\u5728 leetcode \u7684\u6559\u5b78\u7576\u4e2d\uff0c\u6a39\u7684\u5b9a\u7fa9\u5982\u4e0b\uff1a"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"A ",(0,a.kt)("inlineCode",{parentName:"p"},"tree")," is a frequently-used data structure to simulate a hierarchical tree structure.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Each node of the tree will have a root value and a list of references to other nodes which are called child nodes. From graph view, a tree can also be defined as a directed acyclic graph which has ",(0,a.kt)("inlineCode",{parentName:"p"},"N nodes")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"N-1 edges"),".")),(0,a.kt)("p",null,"\u4e8c\u5143\u6a39\u7684\u5b9a\u7fa9\u5982\u4e0b\uff1a"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"A ",(0,a.kt)("inlineCode",{parentName:"p"},"Binary Tree")," is one of the most typical tree structure. As the name suggests, a binary tree is a tree data structure in which each node has ",(0,a.kt)("inlineCode",{parentName:"p"},"at most two children"),", which are referred to as the left child and the right child.")),(0,a.kt)("p",null,"\u7c21\u55ae\u4f86\u8aaa\uff0c\u5982\u679c\u5c07\u4e8c\u5143\u6a39\u756b\u6210\u5716\u7684\u8a71\uff0c\u6703\u9577\u5f97\u50cf\u4e0b\u9762\u7684\u6a23\u5b50\uff1a"),(0,a.kt)("mermaid",{value:"graph TB\n    A((1))--\x3eB((2))\n    A--\x3eC((3))\n    B--\x3eD((4))\n    B--\x3eE((5))\n    C--\x3eF((6))\n    C--\x3eG((7))\n    D--\x3eH((8))\n    D--\x3eI((9))\n    E--\x3eJ((10))"}),(0,a.kt)("h2",{id:"-how-to-traverse-a-tree-\u904d\u6b77\u4e8c\u5143\u6a39"},"\ud83d\udc33 How to Traverse A Tree \u904d\u6b77\u4e8c\u5143\u6a39"),(0,a.kt)("p",null,"\u8207\u4e8c\u5143\u6a39\u76f8\u95dc\u6700\u5e38\u898b\u7684 leetcode \u984c\u5c31\u662f\u5982\u4f55\u904d\u6b77\u4e8c\u5143\u6a39\u4e86\uff0c\u904d\u6b77\u6307\u7684\u662f\u5728\u4e0d\u91cd\u8907\u7684\u60c5\u6cc1\u4e0b\uff0c\u5b58\u53d6\u6a39\u7684\u6240\u6709\u7bc0\u9ede\u3002\u76ee\u524d\u6709\u4e09\u7a2e\u65b9\u5f0f\u53ef\u4ee5\u904d\u6b77\u4e8c\u5143\u6a39\uff1a"),(0,a.kt)("h3",{id:"-pre-order-traversal"},"\ud83e\udd80 Pre-order Traversal"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Pre-order traversal is to visit the root first. Then traverse the left subtree. Finally, traverse the right subtree.")),(0,a.kt)("p",null,"\u904d\u6b77\u4e8c\u5143\u6a39\u7684\u9806\u5e8f\uff1a"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u4e2d"),(0,a.kt)("li",{parentName:"ol"},"\u5de6"),(0,a.kt)("li",{parentName:"ol"},"\u53f3")),(0,a.kt)("p",null,"\u7528 javascript \u4f86\u5be6\u4f5c Pre-order Traversal\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\n\nvar preorderTraversal = function(root) {\n    const res = [];\n    helper(root, res);\n    return res;\n};\n\nconst helper = (treeNode, res) => {\n    if (!treeNode) return;\n    res.push(treeNode.val);\n    helper(treeNode.left, res);\n    helper(treeNode.right, res);\n};\n")),(0,a.kt)("h3",{id:"-in-order-traversal"},"\ud83e\udd80 In-order Traversal"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"In-order traversal is to traverse the left subtree first. Then visit the root. Finally, traverse the right subtree.")),(0,a.kt)("p",null,"\u9806\u5e8f\uff1a"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u5de6"),(0,a.kt)("li",{parentName:"ol"},"\u4e2d"),(0,a.kt)("li",{parentName:"ol"},"\u53f3")),(0,a.kt)("p",null,"\u7528 javascript \u4f86\u5be6\u4f5c In-order Traversal\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar inorderTraversal = function(root) {\n    const res = [];\n    helper(root, res);\n    return res;\n};\n\nconst helper = (treeNode, res) => {\n    if (!treeNode) return;\n    helper(treeNode.left, res);\n    res.push(treeNode.val);\n    helper(treeNode.right, res);\n};\n")),(0,a.kt)("h3",{id:"-post-order-traversal"},"\ud83e\udd80 Post-order Traversal"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Post-order traversal is to traverse the left subtree first. Then traverse the right subtree. Finally, visit the root.")),(0,a.kt)("p",null,"\u9806\u5e8f\uff1a"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u5de6"),(0,a.kt)("li",{parentName:"ol"},"\u53f3"),(0,a.kt)("li",{parentName:"ol"},"\u4e2d")),(0,a.kt)("p",null,"\u7528 javascript \u4f86\u5be6\u4f5c Post-order Traversal\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar postorderTraversal = function(root) {\n    const res = [];\n    helper(root, res);\n    return res;\n};\n\nconst helper = (treeNode, res) => {\n    if (!treeNode) return;\n    helper(treeNode.left, res);\n    helper(treeNode.right, res);\n    res.push(treeNode.val);\n};\n")),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"\u6a39\u88e1\u9762\u7684\u6bcf\u4e00\u500b node \u90fd\u8981\u6309\u7167\u4e0a\u9762\u63d0\u5230\u7684\u9806\u5e8f\u4f86\u904d\u6b77\u624d\u7b97\u5b8c\u6210\u3002")),(0,a.kt)("p",null,"DFS \u905e\u8ff4"),(0,a.kt)("h2",{id:"-\u5b78\u7fd2\u8cc7\u6e90"},"\ud83d\udc33 \u5b78\u7fd2\u8cc7\u6e90"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://leetcode.com/explore/learn/card/data-structure-tree/"},"https://leetcode.com/explore/learn/card/data-structure-tree/")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://hackmd.io/@Aquamay/HyCgHXfid"},"https://hackmd.io/@Aquamay/HyCgHXfid"))))}p.isMDXComponent=!0}}]);