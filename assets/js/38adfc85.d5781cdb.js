"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1046],{7655:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>l,metadata:()=>a,toc:()=>d});var t=n(5893),i=n(1151);const l={title:"Binary Tree Traversal \u4e8c\u5143\u6a39\u8d70\u8a2a",date:new Date("2022-12-04T00:00:00.000Z")},s=void 0,a={id:"notes/data-structure/binary-tree-traversal",title:"Binary Tree Traversal \u4e8c\u5143\u6a39\u8d70\u8a2a",description:"\ud83d\udc33 Definition \u5b9a\u7fa9",source:"@site/docs/notes/data-structure/binary-tree-traversal.md",sourceDirName:"notes/data-structure",slug:"/notes/data-structure/binary-tree-traversal",permalink:"/notes/docs/notes/data-structure/binary-tree-traversal",draft:!1,unlisted:!1,editUrl:"https://github.com/SimoneCheng/notes/tree/main/docs/notes/data-structure/binary-tree-traversal.md",tags:[],version:"current",frontMatter:{title:"Binary Tree Traversal \u4e8c\u5143\u6a39\u8d70\u8a2a",date:"2022-12-04T00:00:00.000Z"},sidebar:"notes",previous:{title:"Tree and Binary Tree \u6a39\u8207\u4e8c\u5143\u6a39",permalink:"/notes/docs/notes/data-structure/tree-and-binary-tree"},next:{title:"Priority Queue",permalink:"/notes/docs/notes/data-structure/priority-queue"}},o={},d=[{value:"\ud83d\udc33 Definition \u5b9a\u7fa9",id:"-definition-\u5b9a\u7fa9",level:2},{value:"\ud83d\udc33 How to Traverse A Tree \u904d\u6b77\u4e8c\u5143\u6a39",id:"-how-to-traverse-a-tree-\u904d\u6b77\u4e8c\u5143\u6a39",level:2},{value:"\ud83e\udd80 Pre-order Traversal",id:"-pre-order-traversal",level:3},{value:"\ud83e\udd80 In-order Traversal",id:"-in-order-traversal",level:3},{value:"\ud83e\udd80 Post-order Traversal",id:"-post-order-traversal",level:3},{value:"\ud83e\udd80 Level Order Traversal",id:"-level-order-traversal",level:3},{value:"\ud83d\udc33 \u5b78\u7fd2\u8cc7\u6e90",id:"-\u5b78\u7fd2\u8cc7\u6e90",level:2}];function h(e){const r={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h2,{id:"-definition-\u5b9a\u7fa9",children:"\ud83d\udc33 Definition \u5b9a\u7fa9"}),"\n",(0,t.jsx)(r.p,{children:"\u5728 leetcode \u7684\u6559\u5b78\u7576\u4e2d\uff0c\u6a39\u7684\u5b9a\u7fa9\u5982\u4e0b\uff1a"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:["A ",(0,t.jsx)(r.code,{children:"tree"})," is a frequently-used data structure to simulate a hierarchical tree structure."]}),"\n"]}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:["Each node of the tree will have a root value and a list of references to other nodes which are called child nodes. From graph view, a tree can also be defined as a directed acyclic graph which has ",(0,t.jsx)(r.code,{children:"N nodes"})," and ",(0,t.jsx)(r.code,{children:"N-1 edges"}),"."]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"\u4e8c\u5143\u6a39\u7684\u5b9a\u7fa9\u5982\u4e0b\uff1a"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:["A ",(0,t.jsx)(r.code,{children:"Binary Tree"})," is one of the most typical tree structure. As the name suggests, a binary tree is a tree data structure in which each node has ",(0,t.jsx)(r.code,{children:"at most two children"}),", which are referred to as the left child and the right child."]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"\u7c21\u55ae\u4f86\u8aaa\uff0c\u5982\u679c\u5c07\u4e8c\u5143\u6a39\u756b\u6210\u5716\u7684\u8a71\uff0c\u6703\u9577\u5f97\u50cf\u4e0b\u9762\u7684\u6a23\u5b50\uff1a"}),"\n",(0,t.jsx)(r.mermaid,{value:"graph TB\n    A((1))--\x3eB((2))\n    A--\x3eC((3))\n    B--\x3eD((4))\n    B--\x3eE((5))\n    C--\x3eF((6))\n    C--\x3eG((7))\n    D--\x3eH((8))\n    D--\x3eI((9))\n    E--\x3eJ((10))"}),"\n",(0,t.jsx)(r.h2,{id:"-how-to-traverse-a-tree-\u904d\u6b77\u4e8c\u5143\u6a39",children:"\ud83d\udc33 How to Traverse A Tree \u904d\u6b77\u4e8c\u5143\u6a39"}),"\n",(0,t.jsx)(r.p,{children:"\u8207\u4e8c\u5143\u6a39\u76f8\u95dc\u6700\u5e38\u898b\u7684 leetcode \u984c\u5c31\u662f\u5982\u4f55\u904d\u6b77\u4e8c\u5143\u6a39\u4e86\uff0c\u904d\u6b77\u6307\u7684\u662f\u5728\u4e0d\u91cd\u8907\u7684\u60c5\u6cc1\u4e0b\uff0c\u5b58\u53d6\u6a39\u7684\u6240\u6709\u7bc0\u9ede\u3002\u76ee\u524d\u6709\u56db\u7a2e\u65b9\u5f0f\u53ef\u4ee5\u904d\u6b77\u4e8c\u5143\u6a39\uff1a"}),"\n",(0,t.jsx)(r.h3,{id:"-pre-order-traversal",children:"\ud83e\udd80 Pre-order Traversal"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsx)(r.p,{children:"Pre-order traversal is to visit the root first. Then traverse the left subtree. Finally, traverse the right subtree."}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"\u904d\u6b77\u4e8c\u5143\u6a39\u7684\u9806\u5e8f\uff1a"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsx)(r.li,{children:"\u4e2d"}),"\n",(0,t.jsx)(r.li,{children:"\u5de6"}),"\n",(0,t.jsx)(r.li,{children:"\u53f3"}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"\u7528 javascript \u4f86\u5be6\u4f5c Pre-order Traversal\uff1a"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\n\nvar preorderTraversal = function(root) {\n    const res = [];\n    helper(root, res);\n    return res;\n};\n\nconst helper = (treeNode, res) => {\n    if (!treeNode) return;\n    res.push(treeNode.val);\n    helper(treeNode.left, res);\n    helper(treeNode.right, res);\n};\n"})}),"\n",(0,t.jsx)(r.h3,{id:"-in-order-traversal",children:"\ud83e\udd80 In-order Traversal"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsx)(r.p,{children:"In-order traversal is to traverse the left subtree first. Then visit the root. Finally, traverse the right subtree."}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"\u9806\u5e8f\uff1a"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsx)(r.li,{children:"\u5de6"}),"\n",(0,t.jsx)(r.li,{children:"\u4e2d"}),"\n",(0,t.jsx)(r.li,{children:"\u53f3"}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"\u7528 javascript \u4f86\u5be6\u4f5c In-order Traversal\uff1a"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar inorderTraversal = function(root) {\n    const res = [];\n    helper(root, res);\n    return res;\n};\n\nconst helper = (treeNode, res) => {\n    if (!treeNode) return;\n    helper(treeNode.left, res);\n    res.push(treeNode.val);\n    helper(treeNode.right, res);\n};\n"})}),"\n",(0,t.jsx)(r.h3,{id:"-post-order-traversal",children:"\ud83e\udd80 Post-order Traversal"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsx)(r.p,{children:"Post-order traversal is to traverse the left subtree first. Then traverse the right subtree. Finally, visit the root."}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"\u9806\u5e8f\uff1a"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsx)(r.li,{children:"\u5de6"}),"\n",(0,t.jsx)(r.li,{children:"\u53f3"}),"\n",(0,t.jsx)(r.li,{children:"\u4e2d"}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"\u7528 javascript \u4f86\u5be6\u4f5c Post-order Traversal\uff1a"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nvar postorderTraversal = function(root) {\n    const res = [];\n    helper(root, res);\n    return res;\n};\n\nconst helper = (treeNode, res) => {\n    if (!treeNode) return;\n    helper(treeNode.left, res);\n    helper(treeNode.right, res);\n    res.push(treeNode.val);\n};\n"})}),"\n",(0,t.jsx)(r.admonition,{type:"warning",children:(0,t.jsx)(r.p,{children:"\u6a39\uff08tree\uff09\u88e1\u9762\u7684\u6bcf\u4e00\u500b\u7bc0\u9ede\uff08node\uff09\u90fd\u8981\u6309\u7167\u4e0a\u9762\u63d0\u5230\u7684\u9806\u5e8f\u4f86\u904d\u6b77\u624d\u7b97\u5b8c\u6210\u3002"})}),"\n",(0,t.jsx)(r.h3,{id:"-level-order-traversal",children:"\ud83e\udd80 Level Order Traversal"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsx)(r.p,{children:"Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level)."}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"\u4ee5\u4e0b\u9762\u7684 Binary Tree \u70ba\u4f8b\uff1a"}),"\n",(0,t.jsx)(r.mermaid,{value:"graph TB\n    A((3))--\x3eB((9))\n    A--\x3eC((20))\n    C--\x3eD((15))\n    C--\x3eE((7))"}),"\n",(0,t.jsxs)(r.p,{children:["\u904d\u6b77\u7684\u9806\u5e8f\u6703\u662f\uff1a",(0,t.jsx)(r.code,{children:"3 > 9 > 20 > 15 > 7"}),"\u3002"]}),"\n",(0,t.jsx)(r.p,{children:"\u7528 javascript \u4f86\u5be6\u4f5c Level Order Traversal\uff1a"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"\u521d\u6b65\u60f3\u6cd5\uff1a\n1. \u7528\u4e00\u500b array \u7576\u4f5c waiting list\uff0c\u8868\u793a\u8655\u7406\u7bc0\u9ede\u7684\u9806\u5e8f\uff0c\u8981\u8a18\u5f97\u7bc0\u9ede\u548c\u7bc0\u9ede\u7684\u968e\u5c64\u3002\n2. \u7528\u53e6\u5916\u4e00\u500b array \u4f86\u5b58\u8655\u7406\u597d\u7684\u7bc0\u9ede\u3002\n"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-javascript",children:"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[][]}\n */\n\nvar levelOrder = function(root) {\n    if (root === null || root.length === 0) {\n        return [];\n    }\n\n    const result = [];\n    const waitingList = [ { level: 0, node: root } ];\n\n    while (waitingList.length > 0) {\n        // \u8655\u7406 waiting list \u7576\u524d\u7684\u7bc0\u9ede\n        const currentNode = waitingList.shift();\n        const { level, node } = currentNode;\n        if (!result[level]) {\n            result[level] = [node.val];\n        } else {\n            result[level].push(node.val);\n        }\n\n        // \u5c07\u7576\u524d\u7bc0\u9ede\u7684\u5b50\u7bc0\u9ede\u52a0\u5165 waiting list\n        if (node.left) {\n            waitingList.push({ level: level + 1, node: node.left });\n        }       \n        if (node.right) {\n            waitingList.push({ level: level + 1, node: node.right });\n        }\n    }\n\n    return result;\n};\n"})}),"\n",(0,t.jsx)(r.admonition,{type:"info",children:(0,t.jsxs)(r.p,{children:["\u9664\u4e86\u4f7f\u7528",(0,t.jsx)(r.strong,{children:"\u905e\u8ff4"}),"\u4f86\u5be6\u4f5c\u8d70\u8a2a\u4e8c\u5143\u6a39\u4e4b\u5916\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 ",(0,t.jsx)(r.strong,{children:"DFS\uff08\u6df1\u5ea6\u512a\u5148\u641c\u5c0b\u6f14\u7b97\u6cd5\uff09"}),"\u3002\u4f46\u6211\u9084\u4e0d\u6703 DFS..."]})}),"\n",(0,t.jsx)(r.h2,{id:"-\u5b78\u7fd2\u8cc7\u6e90",children:"\ud83d\udc33 \u5b78\u7fd2\u8cc7\u6e90"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"https://leetcode.com/explore/learn/card/data-structure-tree/",children:"https://leetcode.com/explore/learn/card/data-structure-tree/"})}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"https://hackmd.io/@Aquamay/HyCgHXfid",children:"\u4e8c\u5143\u6a39(Binary Tree)"})," by Aquamay"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"http://alrightchiu.github.io/SecondRound/binary-tree-traversalxun-fang.html",children:"Binary Tree: Traversal(\u5c0b\u8a2a)"})," by Chiu CC"]}),"\n"]})]})}function c(e={}){const{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},1151:(e,r,n)=>{n.d(r,{Z:()=>a,a:()=>s});var t=n(7294);const i={},l=t.createContext(i);function s(e){const r=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(l.Provider,{value:r},e.children)}}}]);