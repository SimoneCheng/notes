"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9761],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,g=d["".concat(s,".").concat(m)]||d[m]||c[m]||o;return n?a.createElement(g,l(l({ref:t},p),{},{components:n})):a.createElement(g,l({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8508:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const o={title:"React",date:new Date("2023-05-06T00:00:00.000Z")},l=void 0,i={unversionedId:"notes/coding-style-guide/react",id:"notes/coding-style-guide/react",title:"React",description:"\u5728\u5beb React \u7684\u6642\u5019\u8981\u7279\u5225\u6ce8\u610f\u7684 coding style\uff08\u81ea\u5df1\u5e38\u5e38\u5fd8\u8a18\uff09\uff0c\u5176\u4ed6\u7684\u5c31\u6309\u7167 javascript coding style guide \u5c31\u53ef\u4ee5\u4e86\u3002",source:"@site/docs/notes/coding-style-guide/react.md",sourceDirName:"notes/coding-style-guide",slug:"/notes/coding-style-guide/react",permalink:"/notes/docs/notes/coding-style-guide/react",draft:!1,editUrl:"https://github.com/SimoneCheng/notes/tree/main/docs/notes/coding-style-guide/react.md",tags:[],version:"current",frontMatter:{title:"React",date:"2023-05-06T00:00:00.000Z"},sidebar:"notes",previous:{title:"JavaScript",permalink:"/notes/docs/notes/coding-style-guide/javascript"},next:{title:"Recursion \u905e\u8ff4",permalink:"/notes/docs/notes/data-structure-and-algorithm/recursion"}},s={},u=[{value:"\ud83d\udc33 Rules",id:"-rules",level:2},{value:"\ud83e\udd80 Quotes",id:"-quotes",level:3},{value:"\ud83e\udd80 Buttons",id:"-buttons",level:3},{value:"\ud83e\udd80 No inline function in jsx",id:"-no-inline-function-in-jsx",level:3},{value:"\ud83d\udc33 Resource",id:"-resource",level:2}],p={toc:u};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"\u5728\u5beb React \u7684\u6642\u5019\u8981\u7279\u5225\u6ce8\u610f\u7684 coding style\uff08\u81ea\u5df1\u5e38\u5e38\u5fd8\u8a18\uff09\uff0c\u5176\u4ed6\u7684\u5c31\u6309\u7167 javascript coding style guide \u5c31\u53ef\u4ee5\u4e86\u3002"),(0,r.kt)("h2",{id:"-rules"},"\ud83d\udc33 Rules"),(0,r.kt)("h3",{id:"-quotes"},"\ud83e\udd80 Quotes"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Always use double quotes (",(0,r.kt)("inlineCode",{parentName:"p"},'"'),") for JSX attributes, but single quotes (",(0,r.kt)("inlineCode",{parentName:"p"},"'"),") for all other JS ans CSS.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"eslint"),": ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/latest/rules/jsx-quotes"},(0,r.kt)("inlineCode",{parentName:"a"},"jsx-quotes"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"why"),": Regular HTML attributes also typically use double quotes instead of single, so JSX attributes mirror this convention."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"example"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"// bad\n<Foo bar='bar' />\n\n// good\n<Foo bar=\"bar\" />\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"// bad\n<Foo style={{ left: \"20px\" }} />\n\n// good\n<Foo style={{ left: '20px' }} />\n")),(0,r.kt)("h3",{id:"-buttons"},"\ud83e\udd80 Buttons"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"This rules enforces an explicit type attribute for all the button elements and checks that its value is valid per spec (i.e., is one of ",(0,r.kt)("inlineCode",{parentName:"p"},'"button"'),", ",(0,r.kt)("inlineCode",{parentName:"p"},'"submit"'),", and ",(0,r.kt)("inlineCode",{parentName:"p"},'"reset"'),").")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"eslint-plugin-react"),": ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/button-has-type.md"},(0,r.kt)("inlineCode",{parentName:"a"},"button-has-type"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"why"),': The default value of type attribute for button HTML element is "submit" which is often not the desired behavior and may lead to unexpected page reloads.'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"example"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'// bad\n<button>Hello</button>\n\n// good\n<button type="button">Hello</button>\n')),(0,r.kt)("h3",{id:"-no-inline-function-in-jsx"},"\ud83e\udd80 No inline function in jsx"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Do not write a ",(0,r.kt)("inlineCode",{parentName:"p"},"bind")," call or ",(0,r.kt)("inlineCode",{parentName:"p"},"arrow function")," in a JSX prop.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"eslint-plugin-react"),": ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jsx-eslint/eslint-plugin-react/blob/master/docs/rules/jsx-no-bind.md"},(0,r.kt)("inlineCode",{parentName:"a"},"jsx-no-bind"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"why"),": A ",(0,r.kt)("inlineCode",{parentName:"p"},"bind")," call or ",(0,r.kt)("inlineCode",{parentName:"p"},"arrow function")," in a JSX prop will create a brand new function on every single render. This is bad for performance, as it may cause unnecessary re-renders if a brand new function is passed as a prop to a component that uses reference equality check on the prop to determine if it should update."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"note"),": \u5e73\u5e38\u5beb\u7684\u6642\u5019\u61c9\u8a72\u662f\u4e0d\u9700\u8981\u9019\u9ebc\u56b4\u683c\uff0c\u6bd4\u8f03\u8981\u6ce8\u610f\u7684\u662f\uff1a\u5982\u679c\u5df2\u7d93\u628a event handler \u5c01\u88dd\u6210 function \u7684\u8a71\uff0c\u5c31\u8981\u7279\u5225\u6aa2\u67e5\u4e00\u4e0b\u662f\u4e0d\u662f\u53ef\u4ee5\u907f\u514d\u5beb inline function\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"example"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"// bad\n<Button onClick={(e) => console.log(e)}>Hello</Button>\n\n// good\nconst handleClickButton = (e) => {\n    console.log(e);\n}\n<Button onClick={handleClickButton}>Hello</Button>\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'// bad\nconst handleChange = (e) => {\n    setValue(e.target.value);\n    console.log(e.target.value);\n    // ...\n}\n<input value="Hello" onChange={(e) => handleChange(e)} />\n\n// good\nconst handleChange = (e) => {\n    setValue(e.target.value);\n    console.log(e.target.value);\n    // ...\n}\n<input value="Hello" onChange={handleChange} />\n')),(0,r.kt)("h2",{id:"-resource"},"\ud83d\udc33 Resource"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/airbnb/javascript/tree/master/react"},"Airbnb React/JSX Style Guide")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/jsx-eslint/eslint-plugin-react"},"ESlint plugin React")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://jaketrent.com/post/naming-event-handlers-react/"},"Event Handler Naming in React"))))}c.isMDXComponent=!0}}]);